name: Daily DB Backup to S3

on:
  schedule:
    - cron: "0 7 * * *"   # daily at 07:00 UTC
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  S3_BUCKET: ${{ secrets.S3_BUCKET }}
  S3_PREFIX: ${{ secrets.S3_PREFIX }}
  TZ: UTC

jobs:
  backup:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::226809941643:role/GitHubActionsS3BackupRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Postgres client 17 (PGDG)
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y wget ca-certificates gnupg
          sudo install -d /usr/share/keyrings
          wget -qO- https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo gpg --dearmor -o /usr/share/keyrings/postgresql.gpg
          echo "deb [signed-by=/usr/share/keyrings/postgresql.gpg] http://apt.postgresql.org/pub/repos/apt noble-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list
          sudo apt-get update
          sudo apt-get install -y postgresql-client-17

      - name: Create dump filename
        id: vars
        run: echo "DUMP=db_$(date -u +'%Y-%m-%dT%H-%M-%SZ').sql.gz" >> $GITHUB_OUTPUT

      - name: Resolve IPv4 and augment DB URL
        id: dburl
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          set -euo pipefail
          # Extract hostname from URI
          HOST=$(printf '%s' "$DATABASE_URL" | sed -E 's#.*://[^@]*@([^:/?]+).*#\1#')
          IP4=$(getent ahostsv4 "$HOST" | awk '{print $1; exit}')
          if [ -n "$IP4" ]; then
            # Append hostaddr=IPv4 so libpq connects over IPv4 but still verifies hostname
            if echo "$DATABASE_URL" | grep -q '?'; then
              URL_V4="${DATABASE_URL}&hostaddr=${IP4}"
            else
              URL_V4="${DATABASE_URL}?hostaddr=${IP4}"
            fi
          else
            URL_V4="$DATABASE_URL"
          fi
          echo "url=$URL_V4" >> $GITHUB_OUTPUT

      - name: Run pg_dump (v17)
        env:
          DATABASE_URL: ${{ steps.dburl.outputs.url }}
        run: |
          set -euo pipefail
          /usr/lib/postgresql/17/bin/pg_dump "$DATABASE_URL" --format=plain --no-owner --no-privileges | gzip -9 > "${{ steps.vars.outputs.DUMP }}"
          sha256sum "${{ steps.vars.outputs.DUMP }}" > "${{ steps.vars.outputs.DUMP }}.sha256"

      - name: Upload to S3
        run: |
          aws s3 cp "${{ steps.vars.outputs.DUMP }}" s3://${{ env.S3_BUCKET }}/${{ env.S3_PREFIX }}/${{ steps.vars.outputs.DUMP }} --storage-class STANDARD_IA
          aws s3 cp "${{ steps.vars.outputs.DUMP }}.sha256" s3://${{ env.S3_BUCKET }}/${{ env.S3_PREFIX }}/${{ steps.vars.outputs.DUMP }}.sha256 --storage-class STANDARD_IA


